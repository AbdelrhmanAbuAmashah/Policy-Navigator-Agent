{
    "expiry": 1754468827.3723679,
    "data": {
        "673248d66eb563b2b00f75d1": {
            "id": "673248d66eb563b2b00f75d1",
            "name": "Text Embedding [ada 002]",
            "description": " The OpenAI embedding model is designed to convert text (such as sentences, paragraphs, or even entire documents) into numerical vectors, which capture the semantic meaning of the text. These vectors can then be used for a variety of NLP tasks, like search, clustering, or recommendations.",
            "supplier": {
                "id": 1777,
                "name": "OpenAI",
                "code": "openai"
            },
            "additional_info": {
                "code": "",
                "attributes": [
                    {
                        "name": "embeddingSize",
                        "value": 1536
                    }
                ],
                "embedding_size": 1536
            },
            "input_params": {
                "text": {
                    "name": "Text",
                    "code": "text",
                    "required": true,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "language": {
                    "name": "Language",
                    "code": "language",
                    "required": true,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "dialect": {
                    "name": "Dialect",
                    "code": "dialect",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "script": {
                    "name": "Script",
                    "code": "script",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                }
            },
            "output_params": {
                "data": {
                    "name": "Embedding",
                    "code": "data",
                    "dataType": "label"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                }
            },
            "function": "text-embedding",
            "status": "onboarded"
        },
        "669a63646eb56306647e1091": {
            "id": "669a63646eb56306647e1091",
            "name": "GPT-4o Mini",
            "description": "Creates coherent and contextually relevant textual content based on prompts or certain parameters. Useful for chatbots, content creation, and data augmentation.",
            "supplier": {
                "id": 1777,
                "name": "OpenAI",
                "code": "openai"
            },
            "version": "gpt-4o-mini",
            "license": null,
            "privacy": {
                "_value_": "Private",
                "_name_": "PRIVATE",
                "__objclass__": "{'_generate_next_value_': <staticmethod(<function Enum._generate_next_value_ at 0x00000176E5C67CE0>)>, '__module__': 'aixplain.enums.privacy', '_new_member_': <built-in method __new__ of type object at 0x00007FFFACE35750>, '_use_args_': False, '_member_names_': ['PUBLIC', 'PRIVATE', 'RESTRICTED'], '_member_map_': {'PUBLIC': <Privacy.PUBLIC: 'Public'>, 'PRIVATE': <Privacy.PRIVATE: 'Private'>, 'RESTRICTED': <Privacy.RESTRICTED: 'Restricted'>}, '_value2member_map_': {'Public': <Privacy.PUBLIC: 'Public'>, 'Private': <Privacy.PRIVATE: 'Private'>, 'Restricted': <Privacy.RESTRICTED: 'Restricted'>}, '_unhashable_values_': [], '_member_type_': <class 'object'>, '_value_repr_': None, '__doc__': None, 'PUBLIC': <Privacy.PUBLIC: 'Public'>, 'PRIVATE': <Privacy.PRIVATE: 'Private'>, 'RESTRICTED': <Privacy.RESTRICTED: 'Restricted'>, '__new__': <function Enum.__new__ at 0x00000176E5C67BA0>}",
                "_sort_order_": 1
            },
            "cost": {
                "price": 6e-07,
                "unitType": "TOKEN",
                "unitTypeScale": null
            },
            "api_key": "d8b44e9ca69883c2b4e171a4c6e07ea40b4285ffa2e0afd78129d596533b8886",
            "additional_info": {
                "code": "",
                "parameters": {
                    "language": [
                        "en"
                    ],
                    "temperature": [
                        "0"
                    ],
                    "max_tokens": [
                        "200"
                    ],
                    "history": [
                        ""
                    ]
                },
                "inputs": [],
                "attributes": null
            },
            "url": "https://models.aixplain.com/api/v1/execute",
            "backend_url": "https://platform-api.aixplain.com",
            "function": "text-generation",
            "is_subscribed": false,
            "created_at": "2024-11-19 14:43:54.873000+00:00",
            "input_params": {
                "text": {
                    "name": "Text",
                    "code": "text",
                    "required": true,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "temperature": {
                    "name": "Temperature",
                    "code": "temperature",
                    "required": false,
                    "isFixed": false,
                    "dataType": "number",
                    "dataSubType": "number",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "prompt": {
                    "name": "Prompt",
                    "code": "prompt",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "context": {
                    "name": "Context",
                    "code": "context",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "language": {
                    "name": "Language",
                    "code": "language",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "script": {
                    "name": "Script",
                    "code": "script",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                }
            },
            "output_params": {
                "data": {
                    "name": "Text",
                    "code": "data",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                },
                "template": {
                    "required": false,
                    "value": null
                },
                "prompt": {
                    "required": false,
                    "value": null
                },
                "context": {
                    "required": false,
                    "value": null
                },
                "language": {
                    "required": true,
                    "value": null
                },
                "script": {
                    "required": false,
                    "value": null
                },
                "temperature": {
                    "required": false,
                    "value": null
                },
                "max_tokens": {
                    "required": false,
                    "value": null
                },
                "history": {
                    "required": false,
                    "value": null
                }
            },
            "supports_streaming": true,
            "function_type": {
                "_value_": "ai",
                "_name_": "AI",
                "__objclass__": "{'_generate_next_value_': <staticmethod(<function Enum._generate_next_value_ at 0x00000176E5C67CE0>)>, '__module__': 'aixplain.enums.function_type', '_new_member_': <built-in method __new__ of type object at 0x00007FFFACE35750>, '_use_args_': False, '_member_names_': ['AI', 'SEGMENTOR', 'RECONSTRUCTOR', 'UTILITY', 'METRIC', 'SEARCH', 'INTEGRATION', 'CONNECTION', 'MCP_CONNECTION', 'MCPSERVER'], '_member_map_': {'AI': <FunctionType.AI: 'ai'>, 'SEGMENTOR': <FunctionType.SEGMENTOR: 'segmentor'>, 'RECONSTRUCTOR': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'UTILITY': <FunctionType.UTILITY: 'utility'>, 'METRIC': <FunctionType.METRIC: 'metric'>, 'SEARCH': <FunctionType.SEARCH: 'search'>, 'INTEGRATION': <FunctionType.INTEGRATION: 'connector'>, 'CONNECTION': <FunctionType.CONNECTION: 'connection'>, 'MCP_CONNECTION': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'MCPSERVER': <FunctionType.MCPSERVER: 'mcpserver'>}, '_value2member_map_': {'ai': <FunctionType.AI: 'ai'>, 'segmentor': <FunctionType.SEGMENTOR: 'segmentor'>, 'reconstructor': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'utility': <FunctionType.UTILITY: 'utility'>, 'metric': <FunctionType.METRIC: 'metric'>, 'search': <FunctionType.SEARCH: 'search'>, 'connector': <FunctionType.INTEGRATION: 'connector'>, 'connection': <FunctionType.CONNECTION: 'connection'>, 'mcpconnection': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'mcpserver': <FunctionType.MCPSERVER: 'mcpserver'>}, '_unhashable_values_': [], '_member_type_': <class 'object'>, '_value_repr_': None, '__doc__': None, 'AI': <FunctionType.AI: 'ai'>, 'SEGMENTOR': <FunctionType.SEGMENTOR: 'segmentor'>, 'RECONSTRUCTOR': <FunctionType.RECONSTRUCTOR: 'reconstructor'>, 'UTILITY': <FunctionType.UTILITY: 'utility'>, 'METRIC': <FunctionType.METRIC: 'metric'>, 'SEARCH': <FunctionType.SEARCH: 'search'>, 'INTEGRATION': <FunctionType.INTEGRATION: 'connector'>, 'CONNECTION': <FunctionType.CONNECTION: 'connection'>, 'MCP_CONNECTION': <FunctionType.MCP_CONNECTION: 'mcpconnection'>, 'MCPSERVER': <FunctionType.MCPSERVER: 'mcpserver'>, '__new__': <function Enum.__new__ at 0x00000176E5C67BA0>}",
                "_sort_order_": 0
            },
            "status": "onboarded",
            "temperature": 0.0
        },
        "66f423426eb563fa213a3531": {
            "id": "66f423426eb563fa213a3531",
            "name": "Scrape Website Tool",
            "description": "A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content. This tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.",
            "supplier": {
                "id": 16094,
                "name": "CrewAI",
                "code": "crewai"
            },
            "additional_info": {},
            "input_params": {
                "text": {
                    "name": "text",
                    "required": true,
                    "isFixed": false,
                    "values": [],
                    "defaultValues": [],
                    "availableOptions": [],
                    "dataType": "text",
                    "dataSubType": "url",
                    "multipleValues": true
                }
            },
            "output_params": {
                "outputs": {
                    "name": "Outputs",
                    "code": "outputs",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                }
            },
            "function": "utilities",
            "status": "onboarded"
        },
        "67fd9ddfef0365783d06e2ef": {
            "id": "67fd9ddfef0365783d06e2ef",
            "name": "GPT-4.1 Mini",
            "description": "GPT-4.1 mini provides a balance between intelligence, speed, and cost that makes it an attractive model for many use cases.",
            "supplier": {
                "id": 1777,
                "name": "OpenAI",
                "code": "openai"
            },
            "additional_info": {
                "code": "",
                "parameters": {
                    "language": [
                        "en"
                    ],
                    "temperature": [
                        "1"
                    ],
                    "max_tokens": [
                        "2048"
                    ],
                    "history": [
                        ""
                    ]
                }
            },
            "input_params": {
                "text": {
                    "name": "Text",
                    "code": "text",
                    "required": true,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "temperature": {
                    "name": "Temperature",
                    "code": "temperature",
                    "required": false,
                    "isFixed": false,
                    "dataType": "number",
                    "dataSubType": "number",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "prompt": {
                    "name": "Prompt",
                    "code": "prompt",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "context": {
                    "name": "Context",
                    "code": "context",
                    "required": false,
                    "isFixed": false,
                    "dataType": "text",
                    "dataSubType": "text",
                    "multipleValues": false
                },
                "language": {
                    "name": "Language",
                    "code": "language",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                },
                "script": {
                    "name": "Script",
                    "code": "script",
                    "required": false,
                    "isFixed": true,
                    "dataType": "label",
                    "dataSubType": "label",
                    "multipleValues": false,
                    "defaultValues": []
                }
            },
            "output_params": {
                "data": {
                    "name": "Text",
                    "code": "data",
                    "defaultValue": [],
                    "dataType": "text"
                }
            },
            "model_params": {
                "text": {
                    "required": true,
                    "value": null
                },
                "template": {
                    "required": false,
                    "value": null
                },
                "prompt": {
                    "required": false,
                    "value": null
                },
                "context": {
                    "required": false,
                    "value": null
                },
                "language": {
                    "required": true,
                    "value": null
                },
                "script": {
                    "required": false,
                    "value": null
                },
                "temperature": {
                    "required": false,
                    "value": null
                },
                "max_tokens": {
                    "required": false,
                    "value": null
                },
                "history": {
                    "required": false,
                    "value": null
                }
            },
            "function": "text-generation",
            "status": "onboarded"
        }
    }
}